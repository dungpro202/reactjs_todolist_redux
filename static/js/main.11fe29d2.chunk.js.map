{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/TaskForm.js","components/TaskSearch.js","components/TaskSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","reportWebVitals.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["LIST_ALL","SAVE_TASK","TOGGLE_FORM","CLOSE_FORM","OPEN_FORM","UPDATE_STATUS_TASK","DELETE_TASK","EDIT_TASK","FILTER_TABLE","SEARCH","SORT","openForm","type","types","closeForm","editTask","task","connect","state","isDisplayForm","itemEditing","dispatch","props","onSaveTask","actions","onCloseForm","useState","id","name","status","jobs","setJobs","useEffect","console","log","onExitForm","onChange","event","target","value","onClear","className","onClick","onSubmit","preventDefault","required","onSearch","keyword","setKeywords","placeholder","e","sort","onSort","onClickSort","sortBy","sortValue","by","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","TaskControl","onUpdateStatus","onDeleteTask","onOpenForm","onEditTask","index","tasks","filterTable","search","onFilterTable","filter","filterName","filterStatus","setFilter","filterTemp","toLowerCase","indexOf","a","b","elmTasks","map","onToggleForm","onClearTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","s4","Math","floor","random","toString","substring","randomID","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","setItem","stringify","splice","parseInt","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11fe29d2.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import * as types from'./../constants/ActionTypes';\r\n\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task // task:task\r\n    }\r\n}\r\n\r\n// đóng mở form \r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n    }\r\n}\r\n\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n    }\r\n}\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\n\r\n//update status\r\nexport const updateStatus = (id) => {\r\n    return{\r\n        type: types.UPDATE_STATUS_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return{\r\n        type: types.DELETE_TASK,\r\n        id // id:id\r\n    }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return{\r\n        type: types.EDIT_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const filterTask = (filter) => {\r\n    return{\r\n        type: types.FILTER_TABLE,\r\n        filter // filter:filter -> filterName,filterStatus\r\n    }\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n    return{\r\n        type: types.SEARCH,\r\n        keyword // \r\n    }\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n    return{\r\n        type: types.SORT,\r\n        sort //  \r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nfunction TaskForm(props) {\r\n\r\n    const [jobs, setJobs] = useState({\r\n        id: '',\r\n        name: '',\r\n        status: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.itemEditing&&props.itemEditing.id!==null) {\r\n            setJobs({\r\n                id: props.itemEditing.id,\r\n                name: props.itemEditing.name,\r\n                status: props.itemEditing.status,\r\n            })\r\n        } else {\r\n            console.log('123')\r\n        }\r\n    }, [props.itemEditing]);\r\n\r\n\r\n    const onExitForm = () => {\r\n        props.onCloseForm();\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        let target = event.target\r\n        let name = target.name\r\n        let value = target.value\r\n        if (name === 'status') {\r\n            value = target.value === 'true' ? true : false;\r\n        }\r\n\r\n        setJobs({ ...jobs, [name]: value })\r\n    }\r\n\r\n    const onSave = (event) => {\r\n        event.preventDefault();\r\n        props.onSaveTask(jobs);\r\n        onClear();\r\n        onExitForm();\r\n    }\r\n\r\n    const onClear = () => {\r\n        console.log('onClear')\r\n        setJobs({name: '', status: '' })\r\n    }\r\n\r\n    if (!props.isDisplayForm) return '';\r\n\r\n    return (\r\n        <div className=\"panel panel-warning\">\r\n            <div className=\"panel-heading\">\r\n                <h3 className=\"panel-title\">\r\n                    <span\r\n                        className=\"fas fa-times-circle text-right\"\r\n                        onClick={onExitForm}\r\n                    ></span>{jobs.id? 'Cập Nhật Công Việc':'Thêm Công Việc'  }</h3>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n                <form onSubmit={onSave}>\r\n                    <div className=\"form-group\">\r\n                        <label>Tên :</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name='name'\r\n                            value={jobs.name}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n                    <label>Trạng Thái :</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        required=\"required\"\r\n                        name='status'\r\n                        value={jobs.status}\r\n                        onChange={onChange}\r\n                    >\r\n                        <option value={true}>Kích Hoạt</option>\r\n                        <option value={false}>Ẩn</option>\r\n                    </select>\r\n                    <br />\r\n                    <div className=\"text-center\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">Lưu Lại</button>&nbsp;\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger\"\r\n                            onClick={onClear}\r\n                        >Hủy Bỏ</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSaveTask: (task) => {\r\n            dispatch(actions.saveTask(task));\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n       \r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nfunction TaskSearch(props) {\r\n\r\n    const [keyword, setKeywords] = useState('')\r\n\r\n    const onChange=(e) => {\r\n        var target = e.target;\r\n        var value = target.value;\r\n        setKeywords(value)\r\n    }\r\n\r\n    const onSearch=()=>{\r\n        props.onSearch(keyword) // dispatch searchTAsk\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Nhập từ khóa...\"\r\n                    name=\"keyword\"\r\n                    value={keyword}\r\n                    onChange={onChange}\r\n\r\n                />\r\n                <span className=\"input-group-btn\">\r\n                    <button \r\n                    className=\"btn btn-primary\" \r\n                    type=\"button\"\r\n                    onClick={onSearch}\r\n                    >\r\n                        <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                    </button>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        // chuyen func thanh props cua component va dispatch action\r\n        onSearch: (keyword) => {\r\n            dispatch(actions.searchTask(keyword))\r\n        },\r\n        \r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSearch);","import { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nfunction TaskSort(props) {\r\n\r\n    const onClickSort = (sortBy, sortValue) => {\r\n        props.onSort({\r\n            by: sortBy,\r\n            value: sortValue\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp <span className=\"fa fa-sort ml-5\"></span>\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li\r\n                        onClick={() => onClickSort('name', 1)}\r\n                    >\r\n                        <a href='/#' role=\"button\"\r\n                            className={props.sort.by === 'name' & props.sort.value === 1 ? 'sort_selected' : ''}>\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li\r\n                        onClick={() => onClickSort('name', -1)}\r\n\r\n                    >\r\n                        <a href='/#' role=\"button\"\r\n                            className={props.sort.by === 'name' & props.sort.value === -1 ? 'sort_selected' : ''}\r\n                        >\r\n\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên Z-A\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li role=\"separator\" className=\"divider\"></li>\r\n                    <li\r\n                        onClick={() => onClickSort('status', 1)}\r\n                    >\r\n                        <a href='/#' role=\"button\"\r\n                            className={props.sort.by === 'status' & props.sort.value === 1 ? 'sort_selected' : ''}\r\n                        >\r\n                            Trạng Thái Kích Hoạt</a>\r\n                    </li>\r\n                    <li\r\n                        onClick={() => onClickSort('status', -1)}\r\n                    >\r\n                        <a href='/#' role=\"button\"\r\n                            className={props.sort.by === 'status' & props.sort.value === -1 ? 'sort_selected' : ''}\r\n                        >\r\n                            Trạng Thái Ẩn</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    //action tra ve\r\n    return {\r\n        sort: state.sort\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        // chuyen func thanh props cua component va dispatch action\r\n        onSort: (sort) => {\r\n            dispatch(actions.sortTask(sort))\r\n        },\r\n\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSort);"," import React from 'react';\r\nimport TaskSearch from \"./TaskSearch\";\r\nimport TaskSort from \"./TaskSort\";\r\n\r\n\r\nfunction TaskControl(props) {\r\n\r\n    return (\r\n        <div className=\"row mt-15\">\r\n            {/* SEARCH */}\r\n           <TaskSearch/>\r\n            {/* SORT */}\r\n            <TaskSort/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskControl;","import { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nfunction TaskItem(props) {\r\n\r\n\r\n    const onUpdateStatus = () => {\r\n        props.onUpdateStatus(props.task.id)\r\n    }\r\n\r\n    const onDeleteItem = () => {\r\n        props.onDeleteTask(props.task.id)\r\n        props.onCloseForm()\r\n    }\r\n\r\n    const onEditItem = () => {\r\n        props.onOpenForm();\r\n        props.onEditTask(props.task);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.index + 1}</td>\r\n            <td>{props.task.name}</td>\r\n            <td className=\"text-center\">\r\n                <span\r\n                    className={props.task.status === true ? 'label label-success' : 'label label-danger'}\r\n                    onClick={onUpdateStatus}>\r\n                    {props.task.status === true ? 'Kích Hoạt' : 'Ẩn'}\r\n                </span>\r\n            </td>\r\n            <td className=\"text-center\">\r\n                <button type=\"button\" className=\"btn btn-warning\" onClick={onEditItem}>\r\n                    <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n                </button>\r\n                &nbsp;\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick={onDeleteItem}>\r\n                    <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n\r\n        onUpdateStatus: (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteTask: (id) => {\r\n            dispatch(actions.deleteTask(id))\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n        onOpenForm: () => {\r\n            dispatch(actions.openForm())\r\n        },\r\n        onEditTask:(task) => {\r\n            dispatch(actions.editTask(task))\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);\r\n","import { useState } from 'react'\r\nimport TaskItem from './TaskItem';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nfunction TaskList(props) {\r\n\r\n\r\n    const [filter, setFilter] = useState(\r\n        {\r\n            filterName: '',\r\n            filterStatus: -1 //all:1, active:1, deactive:0\r\n        }\r\n    )\r\n\r\n\r\n\r\n    const onChange = (e) => {\r\n        var target = e.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        var filterTemp = {\r\n            name: name === 'filterName' ? value : filter.filterName,\r\n            status: name === 'filterStatus' ? value : filter.filterStatus,\r\n        }\r\n        props.onFilterTable(filterTemp);\r\n        setFilter({ ...filter, [name]: value })\r\n    }\r\n\r\n    //filter on table\r\n\r\n    var { tasks } = props;\r\n\r\n    if (props.filterTable.name) {\r\n        tasks = tasks.filter((task) => {\r\n            return task.name.toLowerCase().indexOf(props.filterTable.name.toLowerCase()) !== -1\r\n        })\r\n    }\r\n    tasks = tasks.filter((task) => {\r\n        if (props.filterTable.status === -1) {\r\n            return task;\r\n        } else {\r\n            return task.status === props.filterTable.status === 1 ?\r\n                true : false;\r\n        }\r\n    })\r\n\r\n    //search\r\n    tasks = tasks.filter((task) => {\r\n        return task.name.toLowerCase().indexOf(props.keyword) !== -1\r\n    })\r\n\r\n    //sort\r\n    if (props.sort.by === 'name') {\r\n        tasks.sort((a, b) => {\r\n            if (a.name > b.name) return props.sort.value;\r\n            else if (a.name < b.name) return -props.sort.value;\r\n            else return 0;\r\n        })\r\n    } else {\r\n        tasks.sort((a, b) => {\r\n            if (a.status > b.status) return -props.sort.value;\r\n            else if (a.status < b.status) return props.sort.value;\r\n            else return 0;\r\n        })\r\n    }\r\n\r\n    var elmTasks = tasks.map((task, index) => {\r\n        return <TaskItem\r\n            key={task.id}\r\n            index={index}\r\n            task={task}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <table className=\"table table-bordered table-hover mt-15\">\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"text-center\">STT</th>\r\n                    <th className=\"text-center\">Tên</th>\r\n                    <th className=\"text-center\">Trạng Thái</th>\r\n                    <th className=\"text-center\">Hành Động</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"filterName\"\r\n                            value={filter.filterName}\r\n                            onChange={onChange}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <select\r\n                            className=\"form-control\"\r\n                            name=\"filterStatus\"\r\n                            value={filter.filterStatus}\r\n                            onChange={onChange}\r\n\r\n                        >\r\n                            <option value=\"-1\">Tất Cả</option>\r\n                            <option value=\"0\">Ẩn</option>\r\n                            <option value=\"1\">Kích Hoạt</option>\r\n                        </select>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                {elmTasks}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        filterTable: state.filterTable,\r\n        keyword: state.search,\r\n        sort: state.sort,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable: (filter) => {\r\n            dispatch(actions.filterTask(filter));\r\n        },\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\r\n","import './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nfunction App(props) {\n   \n    var { isDisplayForm } = props;\n\n    const onToggleForm = () => {\n        if (props.itemEditing && props.itemEditing.id !== '') {\n            // props.onOpenForm();\n        } else {\n            props.onToggleForm()\n        }\n        props.onClearTask({\n            id: '',\n            name: '',\n            status: false\n        });\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-center\">\n                <h1>Quản Lý Công Việc</h1>\n                <hr />\n            </div>\n            <div className=\"row\">\n                <div className={isDisplayForm === true ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                    {/* FORM */}\n                    <TaskForm />\n                </div>\n                <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={onToggleForm}\n                    >\n                        <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                    </button>&nbsp;\n                    {/* SEARCH-SORT */}\n                    <TaskControl/>\n                    {/* LIST */}\n                    <div className=\"row mt-15\">\n                        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                            <TaskList></TaskList>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        itemEditing: state.itemEditing\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        // chuyen func thanh props cua component va dispatch action\n        onToggleForm: () => {\n            dispatch(actions.toggleForm())\n        },\n        onClearTask: (task) => {\n            dispatch(actions.editTask(task))\n        },\n        onOpenForm: () => {\n            dispatch(actions.openForm())\n        },\n\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import *as types from './../constants/ActionTypes';\r\n\r\nconst s4 = () => {\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nconst randomID = () => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\n//Tìm index cv theo id\r\nconst findIndex = (tasks, id) => {\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n        if (task.id === id) {\r\n            result = index;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\nvar initialState = data ? data : [];\r\nvar myReducer = (state = initialState, action) => {\r\n    var id = '';\r\n    var index = -1;\r\n    switch (action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            var task = {\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: (action.task.status === 'true' || action.task.status === true) ? true : false\r\n            }\r\n            if (!task.id) {\r\n                task.id = randomID();\r\n                state.push(task);\r\n            } else {\r\n                index = findIndex(state, task.id);\r\n                state[index] = task;\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];//tránh tham chieu vung nho\r\n        case types.UPDATE_STATUS_TASK:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n            state[index] = {\r\n                ...state[index],\r\n                status: !state[index].status\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n            state.splice(index, 1);\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = false; //close form\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.OPEN_FORM:\r\n            state= true;\r\n            return state;\r\n        case types.CLOSE_FORM:\r\n            state= false;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false,\r\n}; \r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.EDIT_TASK:\r\n            return action.task;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    name: '',\r\n    status: -1,\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.FILTER_TABLE:\r\n            // chuyen qua int\r\n            // action.filter.status = parseInt(action.filter.status);\r\n            console.log(action);\r\n            return {\r\n                name: action.filter.name,\r\n                status: parseInt(action.filter.status,10),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SEARCH:\r\n            console.log(state);\r\n\r\n            console.log(action);\r\n            return action.keyword;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    by: 'name',\r\n    value: 1,\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SORT:\r\n            console.log(action);\r\n            return {\r\n                by: action.sort.by,\r\n                value: action.sort.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import { combineReducers } from \"redux\";\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\n// ket hop cac reducer\r\nconst myReducer = combineReducers({\r\n    tasks, // tasks:tasks\r\n    isDisplayForm, //isDisplayForm:isDisplayForm\r\n    itemEditing, // itemEditing:itemEditing\r\n    filterTable, // filterTable:filterTable\r\n    search,\r\n    sort,\r\n\r\n})\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Store\nimport { createStore } from 'redux';\nimport myReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  myReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}